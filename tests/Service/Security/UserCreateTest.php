<?php

namespace App\Tests\Service\Security;

use App\Entity\Association;
use App\Entity\TokensRegistry;
use App\Entity\User;
use App\Repository\UserRepository;
use App\Service\Brevo\CreateEmailAndSend;
use App\Service\Brevo\SendEmailConfirmRegistration;
use App\Service\Security\Token\TokenConfirmRegistrationCreate;
use App\Service\Security\UserCreate;
use App\Service\Security\UserPasswordHash;
use App\Tests\Repository\InMemoryTokensRegistryRepository;
use App\Tests\Repository\InMemoryUserRepository;
use SendinBlue\Client\Model\CreateSmtpEmail;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserCreateTest extends KernelTestCase
{
    private readonly UserCreate $service;
    private readonly UserRepository $userRepository;
    private User $user;
    private string $hashedPassword = 'hashed_password';

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $userPasswordHashMock = $this->createMock(UserPasswordHash::class);
        $userPasswordHashMock->expects($this->any())
            ->method('hash')
            ->willReturn($this->hashedPassword);

        $this->userRepository = new InMemoryUserRepository();

        $sendEmailConfirmRegisterMock = $this->createMock(SendEmailConfirmRegistration::class);
        $sendEmailConfirmRegisterMock->expects($this->any())
            ->method('sendEmail')
            ->willReturn(new CreateSmtpEmail());

        $tokenConfirmRegistrationCreateMock = $this->createMock(TokenConfirmRegistrationCreate::class);
        $tokenConfirmRegistrationCreateMock->expects($this->any())
            ->method('create')
            ->willReturn(new TokensRegistry());

        $this->service = new UserCreate(
            $userPasswordHashMock,
            $this->userRepository,
            $sendEmailConfirmRegisterMock,
            $tokenConfirmRegistrationCreateMock
        );

        $this->user = new User();
        $this->user->setEmail('monmail@test.com')
            ->addAssociation(new Association());
    }

    public function testCreateUserPart(): void
    {
        $response = $this->service->execute($this->user, 'part');

        /** @var User $registeredUser */
        $registeredUser = $this->userRepository->findAll()[0];

        self::assertInstanceOf(User::class, $response);
        self::assertFalse($registeredUser->isVerified());
        self::assertFalse($registeredUser->isProfessional());
        self::assertNull($registeredUser->getAssociations()[0]);
    }

    public function testCreateUserPro(): void
    {
        $response = $this->service->execute($this->user, 'pro');

        /** @var User $registeredUser */
        $registeredUser = $this->userRepository->findAll()[0];

        self::assertInstanceOf(User::class, $response);
        self::assertFalse($registeredUser->isVerified());
        self::assertTrue($registeredUser->isProfessional());
        self::assertNull($registeredUser->getAssociations()[0]);
    }

    public function testCreateUserAssoc(): void
    {
        $response = $this->service->execute($this->user, 'assoc');

        /** @var User $registeredUser */
        $registeredUser = $this->userRepository->findAll()[0];

        self::assertInstanceOf(User::class, $response);
        self::assertFalse($registeredUser->isVerified());
        self::assertFalse($registeredUser->isProfessional());
        self::assertInstanceOf(Association::class, $registeredUser->getAssociations()[0]);
    }
}
