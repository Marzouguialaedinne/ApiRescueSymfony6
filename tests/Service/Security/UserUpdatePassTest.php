<?php

namespace App\Tests\Service\Security;

use App\Entity\User;
use App\Repository\UserRepository;
use App\Service\Security\UserPasswordHash;
use App\Service\Security\UserUpdatePass;
use App\Tests\Repository\InMemoryUserRepository;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserUpdatePassTest extends KernelTestCase
{
    private readonly UserRepository $userRepository;
    private readonly UserUpdatePass $service;
    private string $hashedPassword = 'hassed_password';

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $userPasswordHasherInterface = $this->createMock(UserPasswordHasherInterface::class);
        $userPasswordHasherInterface->expects($this->any())
            ->method('hashPassword')
            ->willReturn($this->hashedPassword);

        $userPasswordHash = new UserPasswordHash($userPasswordHasherInterface);

        $this->userRepository = new InMemoryUserRepository();

        $this->service = new UserUpdatePass($userPasswordHash, $this->userRepository);
    }

    public function testUpdate(): void
    {
        $oldPass = 'monpass';

        $user = new User();
        $user->setPassword($oldPass);

        $this->userRepository->save($user, true);

        $this->service->update($user, 'newpass');

        /** @var User $registeredUser */
        $registeredUser = $this->userRepository->findAll()[0];

        self::assertNotEquals($oldPass, $registeredUser->getPassword());
    }
}
