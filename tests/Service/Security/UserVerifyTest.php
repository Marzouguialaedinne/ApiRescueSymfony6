<?php

namespace App\Tests\Service\Security;

use App\Entity\TokensRegistry;
use App\Entity\User;
use App\Repository\TokensRegistryRepository;
use App\Repository\UserRepository;
use App\Service\Security\Token\TokenValidityChecker;
use App\Service\Security\UserVerify;
use App\Tests\Repository\InMemoryTokensRegistryRepository;
use App\Tests\Repository\InMemoryUserRepository;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class UserVerifyTest extends KernelTestCase
{
    private readonly UserVerify $service;
    private readonly UserRepository $userRepository;
    private readonly TokensRegistryRepository $tokensRegistryRepository;
    private readonly string $tokenValue;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Prepare constructor
        $this->userRepository = new InMemoryUserRepository();
        $this->tokensRegistryRepository = new InMemoryTokensRegistryRepository();

        $this->service = new UserVerify(
            $this->userRepository,
            new TokenValidityChecker(
                $this->tokensRegistryRepository
            )
        );

        // Prepare origin datas
        $this->tokenValue = 'montokenconfirmregister';

        $user = new User();
        $user->setVerified(false);

        $tokens = new TokensRegistry();
        $tokens->setConfirmRegister($this->tokenValue)
            ->setLinkedUser($user);

        $this->tokensRegistryRepository->save($tokens, true);
        $this->userRepository->save($user, true);

        // Test origin data
        $registeredUser = $this->userRepository->findAll()[0];
        self::assertFalse($registeredUser->isVerified());
    }

    public function testVerifyByTokenValid()
    {
        $response = $this->service->verifyByToken($this->tokenValue);

        // Test results datas
        /** @var User $registeredUser */
        $registeredUser = $this->userRepository->findAll()[0];

        self::assertInstanceOf(User::class, $response);
        self::assertTrue($registeredUser->isVerified());
    }

    public function testVerifyByTokenInvalid()
    {
        $response = $this->service->verifyByToken('badtoken');

        // Test results datas
        /** @var User $registeredUser */
        $registeredUser = $this->userRepository->findAll()[0];

        self::assertNull($response);
        self::assertFalse($registeredUser->isVerified());
    }
}
