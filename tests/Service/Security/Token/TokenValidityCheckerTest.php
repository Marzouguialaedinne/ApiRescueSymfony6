<?php

namespace App\Tests\Service\Security\Token;

use App\Config\TokenTypeEnum;
use App\Entity\TokensRegistry;
use App\Entity\User;
use App\Repository\TokensRegistryRepository;
use App\Service\Security\Token\TokenResetPassCreate;
use App\Service\Security\Token\TokenValidityChecker;
use App\Tests\Repository\InMemoryTokensRegistryRepository;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use DateTimeImmutable;

class TokenValidityCheckerTest extends KernelTestCase
{
    private readonly TokenValidityChecker $service;
    private readonly TokensRegistryRepository $tokensRegistryRepo;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->tokensRegistryRepo = new InMemoryTokensRegistryRepository();
        $this->service = new TokenValidityChecker($this->tokensRegistryRepo);
    }

    public function testIfTokenWithoutExpirationIsValid(): void
    {
        $tokens = new TokensRegistry();
        $tokens->setConfirmRegister('montokenconfirmregister')
            ->setLinkedUser(new User());

        $this->tokensRegistryRepo->save($tokens, true);

        $response = $this->service->check(TokenTypeEnum::TOKEN_CONFIRM_REGISTER, $tokens->getConfirmRegister());

        self::assertTrue($response);
    }

    public function testIfTokenWithoutExpirationIsInvalid(): void
    {
        $tokens = new TokensRegistry();
        $tokens->setConfirmRegister('montokenconfirmregister')
            ->setLinkedUser(new User());

        $response = $this->service->check(TokenTypeEnum::TOKEN_CONFIRM_REGISTER, $tokens->getConfirmRegister());

        self::assertFalse($response);
    }

    public function testIfTokenWithExpirationIsValid(): void
    {
        $tokens = new TokensRegistry();
        $tokens->setResetPass('montokenresetpass')
            ->setResetPassExpiration(new DateTimeImmutable(TokenResetPassCreate::VALIDITY_TIME))
            ->setLinkedUser(new User());

        $this->tokensRegistryRepo->save($tokens, true);

        $response = $this->service->check(TokenTypeEnum::TOKEN_RESET_PASS, $tokens->getResetPass());

        self::assertTrue($response);
    }

    public function testIfTokenWithExpirationIsInvalid(): void
    {
        $tokens = new TokensRegistry();
        $tokens->setResetPass('montokenresetpass')
            ->setResetPassExpiration(new DateTimeImmutable('- 1 minute'))
            ->setLinkedUser(new User());

        $this->tokensRegistryRepo->save($tokens, true);

        $response = $this->service->check(TokenTypeEnum::TOKEN_RESET_PASS, $tokens->getResetPass());

        self::assertFalse($response);
    }
}
